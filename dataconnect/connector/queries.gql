fragment MovieOverview on Movie {
	id
	rating
	title
	posterUrl
	genre
	releaseDate
	stats: movieStats_on_movie {
		watchCount
		reviewCount
		avgRating
	}
}

fragment ReviewOverview on Review {
	id
	user {
		username
	}
	rating
	review
	reviewTime
	watch: watch_on_review {
		watchDate
		format
	}
}

query HomePage @auth(level: PUBLIC) {
	newReleases: movies(limit: 4, orderBy: [{ releaseDate: DESC }]) {
		...MovieOverview
	}
	topMovies: movieStatss(limit: 5, orderBy: [{ avgRating: DESC }]) {
		movie {
			...MovieOverview
		}
	}
	recentReviews: reviews(orderBy: [{ reviewTime: DESC }], limit: 10) {
		...ReviewOverview
		movie {
			...MovieOverview
		}
	}
}

query SearchMovies($query: String!) @auth(level: PUBLIC) {
	movies: movies_embedding_similarity(
		compare_embed: { text: $query, model: "text-embedding-005" }
		limit: 10
	) {
		...MovieOverview
		description
	}
}

query MoviePage($movieId: String!) @auth(level: PUBLIC) {
	movie(id: $movieId) {
		...MovieOverview
		description
		reviews: reviews_on_movie(orderBy: [{ reviewTime: DESC }], limit: 10) {
			...ReviewOverview
		}
		roles: roles_on_movie {
			character
			description
			actor {
				id
				name
				imageUrl
			}
		}
	}
}

query WatchHistoryPage($limit: Int) @auth(level: USER) {
	watches(
		where: { userUid: { eq_expr: "auth.uid" } }
		orderBy: [{ watchDate: DESC }]
		limit: $limit
	) {
		id
		watchDate
		format
		review {
			...ReviewOverview
		}
		movie {
			...MovieOverview
		}
	}
}


# Return a filtered of movies based on criteria
query BrowseMovies(
	# partial title to match - omit for all titles
	$partialTitle: String
	# earliest acceptable release date - omit for no lower bound
	$minDate: Date
	# latest acceptable release date - omit for no upper bound
	$maxDate: Date
	# lowest acceptable average rating for the movie, on a scale from 0.0 to 10.0
	$minRating: Float
	# genres to allow results from. omit for all genres
	$genres: [String!]
) @auth(level: PUBLIC) {
	movies(
		where: {
			title: { contains: $partialTitle }
			releaseDate: { ge: $minDate, le: $maxDate }
			genre: { in: $genres }
			movieStats_on_movie: { avgRating: { ge: $minRating } }
		}
		limit: 30
		orderBy: [{releaseDate: DESC}]
	) {
		...MovieOverview
	}
}

query GetMovies($ids: [String!]) @auth(level: PUBLIC) {
	movies(where: {id: {in: $ids}}) {
		...MovieOverview
	}
}

query DetailedWatchHistory @auth(level: USER) {
	watches(
		where: { userUid: { eq_expr: "auth.uid" } }
		orderBy: [{ watchDate: DESC }]
	) {
		id
		watchDate
		format
		review {
			...ReviewOverview
		}
		movie {
			...MovieOverview
			description
			actors: actors_via_Role {
				name, id
			}
		}
	}
}


query SearchMoviesFTS(
  $query: String
) @auth(level: PUBLIC) {
  query: movies_search(
    query: $query,
    queryFormat: QUERY
  ) {
    id
    title
    posterUrl
	releaseDate
	genre
  }
    plain: movies_search(
    query: $query,
    queryFormat: PLAIN
  ) {
    id
    title
    posterUrl
	releaseDate
	genre
  }
    phrase: movies_search(
    query: $query,
    queryFormat: PHRASE
  ) {
    id
    title
    posterUrl
	releaseDate
	genre
  }
}
